#include <iostream>
#include <set>
#include <map>
#include <vector>
#include <string>

#include "expr_rules.h"
#include "expr_tokens.h"

// Tokenizer setup
Tokenizer tokenizer({
    { COMMENT,  "\\;[^\n]*"},
    { DECNUM,   "\\d+" },
    { HEXNUM,   "\\$([A-F0-9]+[ \t]+)+[A-F0-9]+|\\$([A-F0-9]+)" },
    { BINNUM,   "\\%([0-1]+[ \t]+)+[0-1]+|\\%([0-1])+" },
    { PLUS,     "\\+"},
    { MINUS,    "\\-"},
    { COMMA,    "\\,"},
    { POUND,    "\\#"},
    { MUL,      "\\*"},
    { DIV,      "\\/"},
    { BIT_AND,  "\\&"},
    { BIT_OR,   "\\|"},
    { SLEFT,    "\\<<"},
    { SRIGHT,   "\\>>"},
    { LPAREN,   "\\("},
    { RPAREN,   "\\)"},
    { WS,       "[ \t]+" },

    { ORA,      "ORA"  },
    { AND,      "AND"  },
    { EOR,      "EOR"  },
    { ADC,      "ADC"  },
    { SBC,      "SBC"  },
    { CMP,      "CMP"  },
    { CPX,      "CPX"  },
    { CPY,      "CPY"  },
    { DEC,      "DEC"  },
    { DEX,      "DEX"  },
    { DEY,      "DEY"  },
    { INC,      "INC"  },
    { INX,      "INX"  },
    { INY,      "INY"  },
    { ASL,      "ASL"  },
    { ROL,      "ROL"  },
    { LSR,      "LSR"  },
    { ROR,      "ROR"  },
    { LDA,      "LDA"  },
    { STA,      "STA"  },
    { LDX,      "LDX"  },
    { STX,      "STX"  },
    { LDY,      "LDY"  },
    { STY,      "STY"  },
    { RMB0,     "RMB0" },
    { RMB1,     "RMB1" },
    { RMB2,     "RMB2" },
    { RMB3,     "RMB3" },
    { RMB4,     "RMB4" },
    { RMB5,     "RMB5" },
    { RMB6,     "RMB6" },
    { RMB7,     "RMB7" },
    { SMB0,     "SMB0" },
    { SMB1,     "SMB1" },
    { SMB2,     "SMB2" },
    { SMB3,     "SMB3" },
    { SMB4,     "SMB4" },
    { SMB5,     "SMB5" },
    { SMB6,     "SMB6" },
    { SMB7,     "SMB7" },
    { STZ,      "STZ"  },
    { TAX,      "TAX"  },
    { TXA,      "TXA"  },
    { TAY,      "TAY"  },
    { TYA,      "TYA"  },
    { TSX,      "TSX"  },
    { TXS,      "TXS"  },
    { PLA,      "PLA"  },
    { PHA,      "PHA"  },
    { PLP,      "PLP"  },
    { PHP,      "PHP"  },
    { PHX,      "PHX"  },
    { PHY,      "PHY"  },
    { PLX,      "PLX"  },
    { PLY,      "PLY"  },
    { BRA,      "BRA"  },
    { BPL,      "BPL"  },
    { BMI,      "BMI"  },
    { BVC,      "BVC"  },
    { BVS,      "BVS"  },
    { BCC,      "BCC"  },
    { BCS,      "BCS"  },
    { BNE,      "BNE"  },
    { BEQ,      "BEQ"  },
    { BBR0,     "BBR0" },
    { BBR1,     "BBR1" },
    { BBR2,     "BBR2" },
    { BBR3,     "BBR3" },
    { BBR4,     "BBR4" },
    { BBR5,     "BBR5" },
    { BBR6,     "BBR6" },
    { BBR7,     "BBR7" },
    { BBS0,     "BBS0" },
    { BBS1,     "BBS1" },
    { BBS2,     "BBS2" },
    { BBS3,     "BBS3" },
    { BBS4,     "BBS4" },
    { BBS5,     "BBS5" },
    { BBS6,     "BBS6" },
    { BBS7,     "BBS7" },
    { STP,      "STP"  },
    { WAI,      "WAI"  },
    { BRK,      "BRK"  },
    { RTI,      "RTI"  },
    { JSR,      "JSR"  },
    { RTS,      "RTS"  },
    { JMP,      "JMP"  },
    { BIT,      "BIT"  },
    { TRB,      "TRB"  },
    { TSB,      "TSB"  },
    { CLC,      "CLC"  },
    { SEC,      "SEC"  },
    { CLD,      "CLD"  },
    { SED,      "SED"  },
    { CLI,      "CLI"  },
    { SEI,      "SEI"  },
    { CLV,      "CLV"  },
    { NOP,      "NOP"  },
    { SLO,      "SLO"  },
    { RLA,      "RLA"  },
    { SRE,      "SRE"  },
    { RRA,      "RRA"  },
    { SAX,      "SAX"  },
    { LAX,      "LAX"  },
    { DCP,      "DCP"  },
    { ISC,      "ISC"  },
    { ANC2,     "ANC2" },
    { ANC,      "ANC"  },
    { ALR,      "ALR"  },
    { ARR,      "ARR"  },
    { XAA,      "XAA"  },
    { AXS,      "AXS"  },
    { USBC,     "USBC" },
    { AHX,      "AHX"  },
    { SHY,      "SHY"  },
    { SHX,      "SHX"  },
    { TAS,      "TAS"  },
    { LAS,      "LAS"  },
    { X,        "X"    },
    { Y,        "Y"    },
    { A,        "A"    },
    { EOL,      "\\r?\\n" },
});


// Parser dictionary
std::map<int64_t, std::string> parserDict = {
    { DECNUM,       "DECNUM"},
    { HEXNUM,       "HEXNUM"},
    { BINNUM,       "BINNUM"},
    { PLUS,         "PLUS"},
    { MINUS,        "MINUS"},
    { COMMA,        "COMMA"},
    { X,            "X"},
    { Y,            "Y"},
    { A,            "A"},
    { POUND,        "POUND"},
    { MUL,          "MUL"},
    { DIV,          "DIV"},
    { BIT_AND,      "BIT_AND"},
    { BIT_OR,       "BIT_OR"},
    { SLEFT,        "SHIFT_LEFT"},
    { SRIGHT,       "SHIFT_LEFT" },
    { LPAREN,       "LEFT_PAREN"},
    { RPAREN,       "RIGHT_PAREN"},
    { WS,           "WHITE_SPACE" },
    { Factor,       "Factor" },
    { MulExpr,      "MulExpr" },
    { AddExpr,      "AddExpr" },
    { AddrExpr,     "AddrExpr" },
    { OrExpr,       "OrExpr" },
    { SExpr,        "ShiftExpr"},

    { ORA,      "ORA"  },
    { AND,      "AND"  },
    { EOR,      "EOR"  },
    { ADC,      "ADC"  },
    { SBC,      "SBC"  },
    { CMP,      "CMP"  },
    { CPX,      "CPX"  },
    { CPY,      "CPY"  },
    { DEC,      "DEC"  },
    { DEX,      "DEX"  },
    { DEY,      "DEY"  },
    { INC,      "INC"  },
    { INX,      "INX"  },
    { INY,      "INY"  },
    { ASL,      "ASL"  },
    { ROL,      "ROL"  },
    { LSR,      "LSR"  },
    { ROR,      "ROR"  },
    { LDA,      "LDA"  },
    { STA,      "STA"  },
    { LDX,      "LDX"  },
    { STX,      "STX"  },
    { LDY,      "LDY"  },
    { STY,      "STY"  },
    { RMB0,     "RMB0" },
    { RMB1,     "RMB1" },
    { RMB2,     "RMB2" },
    { RMB3,     "RMB3" },
    { RMB4,     "RMB4" },
    { RMB5,     "RMB5" },
    { RMB6,     "RMB6" },
    { RMB7,     "RMB7" },
    { SMB0,     "SMB0" },
    { SMB1,     "SMB1" },
    { SMB2,     "SMB2" },
    { SMB3,     "SMB3" },
    { SMB4,     "SMB4" },
    { SMB5,     "SMB5" },
    { SMB6,     "SMB6" },
    { SMB7,     "SMB7" },
    { STZ,      "STZ"  },
    { TAX,      "TAX"  },
    { TXA,      "TXA"  },
    { TAY,      "TAY"  },
    { TYA,      "TYA"  },
    { TSX,      "TSX"  },
    { TXS,      "TXS"  },
    { PLA,      "PLA"  },
    { PHA,      "PHA"  },
    { PLP,      "PLP"  },
    { PHP,      "PHP"  },
    { PHX,      "PHX"  },
    { PHY,      "PHY"  },
    { PLX,      "PLX"  },
    { PLY,      "PLY"  },
    { BRA,      "BRA"  },
    { BPL,      "BPL"  },
    { BMI,      "BMI"  },
    { BVC,      "BVC"  },
    { BVS,      "BVS"  },
    { BCC,      "BCC"  },
    { BCS,      "BCS"  },
    { BNE,      "BNE"  },
    { BEQ,      "BEQ"  },
    { BBR0,     "BBR0" },
    { BBR1,     "BBR1" },
    { BBR2,     "BBR2" },
    { BBR3,     "BBR3" },
    { BBR4,     "BBR4" },
    { BBR5,     "BBR5" },
    { BBR6,     "BBR6" },
    { BBR7,     "BBR7" },
    { BBS0,     "BBS0" },
    { BBS1,     "BBS1" },
    { BBS2,     "BBS2" },
    { BBS3,     "BBS3" },
    { BBS4,     "BBS4" },
    { BBS5,     "BBS5" },
    { BBS6,     "BBS6" },
    { BBS7,     "BBS7" },
    { STP,      "STP"  },
    { WAI,      "WAI"  },
    { BRK,      "BRK"  },
    { RTI,      "RTI"  },
    { JSR,      "JSR"  },
    { RTS,      "RTS"  },
    { JMP,      "JMP"  },
    { BIT,      "BIT"  },
    { TRB,      "TRB"  },
    { TSB,      "TSB"  },
    { CLC,      "CLC"  },
    { SEC,      "SEC"  },
    { CLD,      "CLD"  },
    { SED,      "SED"  },
    { CLI,      "CLI"  },
    { SEI,      "SEI"  },
    { CLV,      "CLV"  },
    { NOP,      "NOP"  },
    { SLO,      "SLO"  },
    { RLA,      "RLA"  },
    { SRE,      "SRE"  },
    { RRA,      "RRA"  },
    { SAX,      "SAX"  },
    { LAX,      "LAX"  },
    { DCP,      "DCP"  },
    { ISC,      "ISC"  },
    { ANC,      "ANC"  },
    { ANC2,     "ANC2" },
    { ALR,      "ALR"  },
    { ARR,      "ARR"  },
    { XAA,      "XAA"  },
    { AXS,      "AXS"  },
    { USBC,     "USBC" },
    { AHX,      "AHX"  },
    { SHY,      "SHY"  },
    { SHX,      "SHX"  },
    { TAS,      "TAS"  },
    { LAS,      "LAS"  },

    { OpCode,           "OpCode"},
    { Op_Instruction,   "Op_Instruction"},
    { Op_Implied,       "OpCode_Implied" },
    { Op_Accumulator,   "Op_Accumulator" },
    { Op_Immediate,     "OpCode_Immediate" },
    { Op_Absolute,      "OpCode_Absolute"},
    { Op_AbsoluteX,     "OpCode_AbsoluteX"},
    { Op_AbsoluteY,     "OpCode_AbsoluteY"},
    { Op_Indirect,      "OpCode_Indirect"},
    { Op_IndirectX,     "OpCode_IndirectX"},
    { Op_IndirectY,     "OpCode_IndirectY"},
    { Number,           "Number" },
    { Expr,             "Expr" },
    { Comment,          "Comment" },
    { Statement,        "Statement" },
    { Line,             "Line" },
    { Prog,             "Prog"},
};
