#include <iostream>
#include <set>
#include <map>
#include <vector>
#include <string>

#include "expr_rules.h"
#include "expr_tokens.h"

/// <summary>
/// Initializes a Tokenizer with a set of token types and their corresponding regular expressions for parsing assembly-like language.
/// </summary>
Tokenizer tokenizer({
    { COMMENT,  "\\;[^\n]*"},
    { DECNUM,   "\\d+" },
    { CHAR,     "(\'.\')|(\".\")" },
    { HEXNUM,   "\\$([A-F0-9]+[ \t]+)+[A-F0-9]+|\\$([A-F0-9]+)" },
    { BINNUM,   "%([0-1]+[ \t]+)+[0-1]+|%([0-1])+" },
    { TEXT,     R"(\'[^']*\'|\"[^\"]*\")" },
    { PLUS,     "\\+"},
    { MINUS,    "\\-"},
    { EQUAL,    "\\="},
    { COMMA,    ","},
    { COLAN,    "\\:"},
    { POUND,    "\\#"},
    { MUL,      "\\*"},
    { DIV,      "\\/"},
    { MOD,      "\\%"},
    { BIT_AND,  "\\&"},
    { BIT_OR,   "\\|"},
    { ONESCOMP, "\\~"},
    { SLEFT,    "\\<<"},
    { SRIGHT,   "\\>>"},
    { LPAREN,   "\\("},
    { RPAREN,   "\\)"},
    { AT,       "\\@"},
    { WS,       "[ \t]+" },

    { ORA,      "\\bORA\\b"  },
    { AND,      "\\bAND\\b"  },
    { EOR,      "\\bEOR\\b"  },
    { ADC,      "\\bADC\\b"  },
    { SBC,      "\\bSBC\\b"  },
    { CMP,      "\\bCMP\\b"  },
    { CPX,      "\\bCPX\\b"  },
    { CPY,      "\\bCPY\\b"  },
    { DEC,      "\\bDEC\\b"  },
    { DEX,      "\\bDEX\\b"  },
    { DEY,      "\\bDEY\\b"  },
    { INC,      "\\bINC\\b"  },
    { INX,      "\\bINX\\b"  },
    { INY,      "\\bINY\\b"  },
    { ASL,      "\\bASL\\b"  },
    { ROL,      "\\bROL\\b"  },
    { LSR,      "\\bLSR\\b"  },
    { ROR,      "\\bROR\\b"  },
    { LDA,      "\\bLDA\\b"  },
    { STA,      "\\bSTA\\b"  },
    { LDX,      "\\bLDX\\b"  },
    { STX,      "\\bSTX\\b"  },
    { LDY,      "\\bLDY\\b"  },
    { STY,      "\\bSTY\\b"  },
    { RMB0,     "\\bRMB0\\b" },
    { RMB1,     "\\bRMB1\\b" },
    { RMB2,     "\\bRMB2\\b" },
    { RMB3,     "\\bRMB3\\b" },
    { RMB4,     "\\bRMB4\\b" },
    { RMB5,     "\\bRMB5\\b" },
    { RMB6,     "\\bRMB6\\b" },
    { RMB7,     "\\bRMB7\\b" },
    { SMB0,     "\\bSMB0\\b" },
    { SMB1,     "\\bSMB1\\b" },
    { SMB2,     "\\bSMB2\\b" },
    { SMB3,     "\\bSMB3\\b" },
    { SMB4,     "\\bSMB4\\b" },
    { SMB5,     "\\bSMB5\\b" },
    { SMB6,     "\\bSMB6\\b" },
    { SMB7,     "\\bSMB7\\b" },
    { STZ,      "\\bSTZ\\b"  },
    { TAX,      "\\bTAX\\b"  },
    { TXA,      "\\bTXA\\b"  },
    { TAY,      "\\bTAY\\b"  },
    { TYA,      "\\bTYA\\b"  },
    { TSX,      "\\bTSX\\b"  },
    { TXS,      "\\bTXS\\b"  },
    { PLA,      "\\bPLA\\b"  },
    { PHA,      "\\bPHA\\b"  },
    { PLP,      "\\bPLP\\b"  },
    { PHP,      "\\bPHP\\b"  },
    { PHX,      "\\bPHX\\b"  },
    { PHY,      "\\bPHY\\b"  },
    { PLX,      "\\bPLX\\b"  },
    { PLY,      "\\bPLY\\b"  },
    { BRA,      "\\bBRA\\b"  },
    { BPL,      "\\bBPL\\b"  },
    { BMI,      "\\bBMI\\b"  },
    { BVC,      "\\bBVC\\b"  },
    { BVS,      "\\bBVS\\b"  },
    { BCC,      "\\bBCC\\b"  },
    { BCS,      "\\bBCS\\b"  },
    { BNE,      "\\bBNE\\b"  },
    { BEQ,      "\\bBEQ\\b"  },
    { BBR0,     "\\bBBR0\\b" },
    { BBR1,     "\\bBBR1\\b" },
    { BBR2,     "\\bBBR2\\b" },
    { BBR3,     "\\bBBR3\\b" },
    { BBR4,     "\\bBBR4\\b" },
    { BBR5,     "\\bBBR5\\b" },
    { BBR6,     "\\bBBR6\\b" },
    { BBR7,     "\\bBBR7\\b" },
    { BBS0,     "\\bBBS0\\b" },
    { BBS1,     "\\bBBS1\\b" },
    { BBS2,     "\\bBBS2\\b" },
    { BBS3,     "\\bBBS3\\b" },
    { BBS4,     "\\bBBS4\\b" },
    { BBS5,     "\\bBBS5\\b" },
    { BBS6,     "\\bBBS6\\b" },
    { BBS7,     "\\bBBS7\\b" },
    { STP,      "\\bSTP\\b"  },
    { WAI,      "\\bWAI\\b"  },
    { BRK,      "\\bBRK\\b"  },
    { RTI,      "\\bRTI\\b"  },
    { JSR,      "\\bJSR\\b"  },
    { RTS,      "\\bRTS\\b"  },
    { JMP,      "\\bJMP\\b"  },
    { BIT,      "\\bBIT\\b"  },
    { TRB,      "\\bTRB\\b"  },
    { TSB,      "\\bTSB\\b"  },
    { CLC,      "\\bCLC\\b"  },
    { SEC,      "\\bSEC\\b"  },
    { CLD,      "\\bCLD\\b"  },
    { SED,      "\\bSED\\b"  },
    { CLI,      "\\bCLI\\b"  },
    { SEI,      "\\bSEI\\b"  },
    { CLV,      "\\bCLV\\b"  },
    { NOP,      "\\bNOP\\b"  },
    { SLO,      "\\bSLO\\b"  },
    { RLA,      "\\bRLA\\b"  },
    { SRE,      "\\bSRE\\b"  },
    { RRA,      "\\bRRA\\b"  },
    { SAX,      "\\bSAX\\b"  },
    { LAX,      "\\bLAX\\b"  },
    { DCP,      "\\bDCP\\b"  },
    { ISC,      "\\bISC\\b"  },
    { ANC2,     "\\bANC2\\b" },
    { ANC,      "\\bANC\\b"  },
    { ALR,      "\\bALR\\b"  },
    { ARR,      "\\bARR\\b"  },
    { XAA,      "\\bXAA\\b"  },
    { AXS,      "\\bAXS\\b"  },
    { USBC,     "\\bUSBC\\b" },
    { AHX,      "\\bAHX\\b"  },
    { SHY,      "\\bSHY\\b"  },
    { SHX,      "\\bSHX\\b"  },
    { TAS,      "\\bTAS\\b"  },
    { LAS,      "\\bLAS\\b"  },

    { SYM,      "[A-Z]+[A-Z0-9_]+" },
    { LOCALSYM, "\\@[A-Z]+[A-Z0-9_]+" },
    { X,        "X"    },
    { Y,        "Y"    },
    { A,        "A"    },
    { ORG,      "\\.ORG" },
    { BYTE,      "(\\.BYTE)|(\\.BYT)" },
    { WORD,      "(\\.WORD)|(\\.WRD)" }, 
    { DS,       "\\.DS" },
    { MACRO_DIR, "(\\.MACRO)|(\\.MAC)" },
    { INCLUDE,   "(\\.INCLUDE)|(\\.INC)"},
    { ENDMACRO_DIR, "(\\.ENDM)|(\\.ENDMACRO)" },
    { MACRO_PARAM, "\\\\\\d+"},
    { EOL,      "\\r?\\n" },
});

// Parser dictionary
std::map<int64_t, std::string> parserDict = {
    { CHAR,         "CHAR"},
    { DECNUM,       "DECNUM"},
    { HEXNUM,       "HEXNUM"},
    { BINNUM,       "BINNUM"},
    { BYTE,         "BYTE"},
    { WORD,         "WORD"},
    { PLUS,         "PLUS"},
    { MINUS,        "MINUS"},
    { COMMA,        "COMMA"},
    { COLAN,        "COLAN"},
    { X,            "X"},
    { Y,            "Y"},
    { A,            "A"},
    { POUND,        "POUND"},
    { MUL,          "MUL"},
    { TEXT,         "TEXT"},
    { MOD,          "MOD"},
    { DIV,          "DIV"},
    { BIT_AND,      "BIT_AND"},
    { BIT_OR,       "BIT_OR"},
    { BIT_XOR,      "BIT_XOR"},
    { SLEFT,        "SHIFT_LEFT"},
    { SRIGHT,       "SHIFT_LEFT" },
    { LPAREN,       "LEFT_PAREN"},
    { RPAREN,       "RIGHT_PAREN"},
    { ONESCOMP,     "ONES_COMP"},
    { AT,           "AT" },
    { WS,           "WHITE_SPACE" },
    { SYM,          "SYM" },
    { LOCALSYM,     "LOCAL_SYM" },
    { COMMENT,      "COMMENT" },
    { EQUAL,        "EQUALS" },
    { ORG,          "ORG" },
    { EOL,          "EOL" },
    { MACRO_DIR,    "MACRO_DEF" },
    { ENDMACRO_DIR, "END_MACRO" },
    { MACRO_PARAM,  "MACRO_PARAM" },
    { INCLUDE,      "INCLUDE"},
    { Factor,       "Factor" },
    { MulExpr,      "MulExpr" },
    { AddExpr,      "AddExpr" },
    { AddrExpr,     "AddrExpr" },
    { OrExpr,       "OrExpr" },
    { XOrExpr,      "XOrExpr" },
    { ShiftExpr,    "ShiftExpr"},
    { MacroDef,     "MacroDef" },
    { MacroStart,   "MacroStart" },
    { MacroCall,    "MacroCall" },
    { MacroArgs,    "MacroArgs" },
    { EndMacro,     "EndMacro" },
    { ExprList,     "ExpressionList" },
    { TextExpr,     "TextExpr" },
    { ORA,      "ORA"  },
    { AND,      "AND"  },
    { EOR,      "EOR"  },
    { ADC,      "ADC"  },
    { SBC,      "SBC"  },
    { CMP,      "CMP"  },
    { CPX,      "CPX"  },
    { CPY,      "CPY"  },
    { DEC,      "DEC"  },
    { DEX,      "DEX"  },
    { DEY,      "DEY"  },
    { INC,      "INC"  },
    { INX,      "INX"  },
    { INY,      "INY"  },
    { ASL,      "ASL"  },
    { ROL,      "ROL"  },
    { LSR,      "LSR"  },
    { ROR,      "ROR"  },
    { LDA,      "LDA"  },
    { STA,      "STA"  },
    { LDX,      "LDX"  },
    { STX,      "STX"  },
    { LDY,      "LDY"  },
    { STY,      "STY"  },
    { RMB0,     "RMB0" },
    { RMB1,     "RMB1" },
    { RMB2,     "RMB2" },
    { RMB3,     "RMB3" },
    { RMB4,     "RMB4" },
    { RMB5,     "RMB5" },
    { RMB6,     "RMB6" },
    { RMB7,     "RMB7" },
    { SMB0,     "SMB0" },
    { SMB1,     "SMB1" },
    { SMB2,     "SMB2" },
    { SMB3,     "SMB3" },
    { SMB4,     "SMB4" },
    { SMB5,     "SMB5" },
    { SMB6,     "SMB6" },
    { SMB7,     "SMB7" },
    { STZ,      "STZ" },
    { TAX,      "TAX" },
    { TXA,      "TXA" },
    { TAY,      "TAY" },
    { TYA,      "TYA" },
    { TSX,      "TSX" },
    { TXS,      "TXS" },
    { PLA,      "PLA" },
    { PHA,      "PHA" },
    { PLP,      "PLP" },
    { PHP,      "PHP" },
    { PHX,      "PHX" },
    { PHY,      "PHY" },
    { PLX,      "PLX" },
    { PLY,      "PLY" },
    { BRA,      "BRA" },
    { BPL,      "BPL" },
    { BMI,      "BMI" },
    { BVC,      "BVC" },
    { BVS,      "BVS" },
    { BCC,      "BCC" },
    { BCS,      "BCS" },
    { BNE,      "BNE" },
    { BEQ,      "BEQ" },
    { BBR0,     "BBR0" },
    { BBR1,     "BBR1" },
    { BBR2,     "BBR2" },
    { BBR3,     "BBR3" },
    { BBR4,     "BBR4" },
    { BBR5,     "BBR5" },
    { BBR6,     "BBR6" },
    { BBR7,     "BBR7" },
    { BBS0,     "BBS0" },
    { BBS1,     "BBS1" },
    { BBS2,     "BBS2" },
    { BBS3,     "BBS3" },
    { BBS4,     "BBS4" },
    { BBS5,     "BBS5" },
    { BBS6,     "BBS6" },
    { BBS7,     "BBS7" },
    { STP,      "STP" },
    { WAI,      "WAI" },
    { BRK,      "BRK" },
    { RTI,      "RTI" },
    { JSR,      "JSR" },
    { RTS,      "RTS" },
    { JMP,      "JMP" },
    { BIT,      "BIT" },
    { TRB,      "TRB" },
    { TSB,      "TSB" },
    { CLC,      "CLC" },
    { SEC,      "SEC" },
    { CLD,      "CLD" },
    { SED,      "SED" },
    { CLI,      "CLI" },
    { SEI,      "SEI" },
    { CLV,      "CLV" },
    { NOP,      "NOP" },
    { SLO,      "SLO" },
    { RLA,      "RLA" },
    { SRE,      "SRE" },
    { RRA,      "RRA" },
    { SAX,      "SAX" },
    { LAX,      "LAX" },
    { DCP,      "DCP" },
    { ISC,      "ISC" },
    { ANC,      "ANC" },
    { ANC2,     "ANC2" },
    { ALR,      "ALR" },
    { ARR,      "ARR" },
    { XAA,      "XAA" },
    { AXS,      "AXS" },
    { USBC,     "USBC" },
    { AHX,      "AHX" },
    { SHY,      "SHY" },
    { SHX,      "SHX" },
    { TAS,      "TAS" },
    { LAS,      "LAS" },

    { OpCode,           "OpCode" },
    { Op_Instruction,   "Op_Instruction" },
    { Op_Implied,       "OpCode_Implied" },
    { Op_Accumulator,   "OpCode_Accumulator" },
    { Op_Immediate,     "OpCode_Immediate" },
    { Op_Absolute,      "OpCode_Absolute" },
    { Op_AbsoluteX,     "OpCode_AbsoluteX" },
    { Op_AbsoluteY,     "OpCode_AbsoluteY" },
    { Op_ZeroPage,      "OpCode_ZeroPage" },
    { Op_ZeroPageX,     "OpCode_ZeroPageX" },
    { Op_ZeroPageY,     "OpCode_ZeroPageY" },
    { Op_Indirect,      "OpCode_Indirect" },
    { Op_IndirectX,     "OpCode_IndirectX" },
    { Op_IndirectY,     "OpCode_IndirectY" },
    { Op_Relative,      "OpCode_Relative" },
    { Op_ZeroPageRelative,  "OpCode_ZeroPageRelative"},

    { Number,           "Number" },
    { Symbol,           "Symbol" },
    { Label,            "Label" },
    { Equate,           "Equate" },
    { Expr,             "Expr" },
    { OrgDirective,     "OrgDirective" },
    { ByteDirective,    "ByteDirective" },
    { WordDirective,    "WordDirective" },
    { StorageDirective, "StoreageDirective"},
    { IncludeDirective, "IncludeDirective" },
    { Comment,          "Comment" },
    { Statement,        "Statement" },
    { Line,             "Line" },
    { LineList,         "LineList" },
    { Prog,             "Prog" },
};
